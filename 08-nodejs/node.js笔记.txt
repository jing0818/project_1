
什么是fs文件系统模块
    fs模块是Node.js官方提供的， 用来操作文件的模块。它提供了一系列的方法和属性，用来满足用户对文件的操作需求

    例如：
        1：fs.readFile()方法，用来读取指定文件中的内容
        2：fs.writeFile()方法，用来向指定的文件中写入内容
    
    如果要在js代码中，使用fs模块来操作文件，则需要使用如下的方式先导入：
        const fs=require('fs');


fs模块 - 路径动态拼接的问题
    在使用fs模块操作文件时，如果提供的操作路径是以./或../开头的相对路径时，很容易出现路径动态拼接错误的问题
    原因：代码在运行的时候，会以执行node命令对所处的目录，动态拼接出被操作文件的完整路径。

path路径模块
    path模块时Node.js官方提供的，用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求

    例如： 
        1：path.join()方法，用来将多个路径片段拼接成一个完整的路径字符串
        2：path.basename()方法，用来从路径字符串中，将文件名解析出来

http模块
    http模块是Node.js官方提供的，用来创建web服务器的模块，通过http模块提供的http.createServer()方法，就
    能方便地把一台普通地电脑，变成一台Web服务器，从而对外提供Web资源服务。

    如果要希望使用http模块创建Web服务器，则需要先导入它
    const htt=require('http');

如果想在在项目中安装指定名称的包，需要运行如下的命令:
    npm install 包的完整名称
上述的装包命令，可以简写如下格式：
    npm i 包的完整名称

安装指定版本的包
    默认情况下，使用npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以
    在包名之后，通过@符号指定具体的版本，例如：
        npm i moment@2.22.2

包的语义化规范
    包的版本号是以"点分十进制"形式进行定义的，总共有三位数字，例如2.24.0

    其中每一位数字所代表的含有如下：
        第一位数字：大版本
        第二位数字：功能版本
        第三位数字：Bug修复版本

    版本号提示的规则：只要前面的版本号增长了，则后面的版本号归零

npm规定，在项目根目录中，必须提供一个叫做package.json的包管理配置文件。用来记录与项目有关的
一些配置信息。例如：
    1：项目的名称，版本号，描述等
    2：项目中都用到了哪些包
    3：哪些包只在开发期间会用到
    4：哪些包在开发和部署时都需要用到

一次性安装所以的包
    可以运行npm install命令(或npm i)一次性安装所以的依赖包

    执行npm install 命令时，npm包管理工具会先读取package.json中的dependencies节点，
    读取到记录的所以依赖包名称和版本号之后，npm包管理工具会把这些包一次性下载到项目中

卸载包
    可以运行 npm uninstall命令，来卸载指定的包；


devDependencies节点
    如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到devDependenies节点中，
    与之对应得，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies节点中。    


使用如下得命令，将包记录到 devDependencies节点中
    npm i 包名 -D
上述命令时简写形式，等价于下面完整得写法：
    npm install 包名 --save-dev    

切换npm的下包镜像源
    下包的镜像源，指的就是下包的服务器地址。

查看当前的下包镜像源
npm config get registry

将下包的镜像切换为淘宝镜像源
npm config set registry=https://registry.npm.taobao.otg/

检查镜像源是否下载成功
npm config get registry

nrm：为了更方便的切换下包的镜像源，我们可以安装nrm这个小工具，利用nrm提供的终端命令，可以快速
查看和切换下包的镜像源。

通过npm包管理器，将nrm安装为全局可用的工具
npm i nrm -g

查看所有可用的镜像源
nrm ls

将下包的镜像源切换为taobao镜像
nrm use taobao

包的分类
    使用npm包管理工具下载的包，共分为两大类，分别是：
        项目包：
            哪些被安装到项目的node_modules目录中的包，都是项目包

            项目开发包又分为两类，分别是
                开发依赖包(被记录到devDependencies节点中的包，只在开发期间会用到)
                开发依赖包：nmp i 包名 -D 
                核心依赖包(被记录到dependencies节点中的包，在开发期间和项目上线之后都会用到)
                核心依赖包：nmp i 包名
        全局包
            在执行npm install命令时，如果提供了-g参数，则会把包安装为全局包。
            全局包会被安装到C\User\用户目录\AppData\Roaming\npmnode_modules目录下。

            安装全局包：npm i 包名 -g
            删除全局包：npm uninstall 包名 -g
        
            注意：
                1：只有工具性质的包，才有全局安装的必要性，因为他们提供了好用的终端命令。
                2：判断某个包是否需要全局安装后才能使用，可用参考官方提供的使用说明即可

    i5ting_toc
        i5ting_toc是一个可用把md文档转为html页面的小工具，使用步骤如下：

        将 i5ting_toc 安装为全局包
        npm install -g i5ting_toc
        调用 i5ting_toc,轻松实现md转html的功能
        i5ting_toc -f 要转换的md文件路径 -o

    规范的包结构
        在清楚包的概念，以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构

        一个规范的包，它的组成结构，必须符合以下3点要求：
            1：包必须以单独目录而存在
            2：包的顶级目录下要必须包含package.json这个包管理配置文件
            3：package.json中必须包含name,version,main这三个属性，分别代表包的名字，版本号，包的入口

    
    开发属于自己的包：
        1：需要实现的功能
            1：格式化日期
            2：转义HTML中的特殊字符
            3：还原HTML中的特殊字符

        2：初始化包的基本结构
            1：新建itheima-tools文件夹，作为包的根目录
            2：在itheima-tools文件夹中，新建如下三个文件：
                    package.json(包管理配置文件)
                    index.js(包的入口文件)
                    README.md(包的说明文档)

    发布包
        登录npm账号

        npm账号注册完成后，可以在终端中执行npm login命令，依次输入用户名，密码，邮箱后，即可登录成功

        在运行npm login命令之前，必须把下包的服务器地址切换为npm的官方服务器，否则会导致发布包失败

        把包发布到npm上
            将终端切换到包的根目录之后，运行npm publish命令，即可将包发布到npm上(注意：包名不能雷同)

        删除已发布的包
            运行npm unpublish 包名 -force命令，即可从npm删除已发布的包。

            注意：
                1：npm unpublish 命令只能删除72小时以内发布的包
                2：npm unpublish 删除的包，在24小时内不允许重复发布
                3：发布包的时候要慎重，尽量不要往npm上发布没有意义的包

模块的加载机制
    优先从缓存中加载
        模块在第一次加载后会被缓存，这也意味着多次调用require()不会导致模块的代码被执行多次
        注意：不论是内置模块，用户自定义模块，还剩第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率

        内置模块的加载机制
            内置模块是由Node.js官方提供的模块，内置模块的加载优先级最高。
            例如：require('js')始终返回内置的fs模块，即使在node_modules目录下有名字相同的包也叫做fs

        自定义模块加载机制
            使用require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定./
            或../这样的路径标识符，则node会把它当作内置模块或第三方模块进行加载。

            同时，在使用require()导入自定义模块时，如果省略了文件的扩展名，则Node.js会按顺序分别尝试加载以下的文件：
                1：按照确切的文件名进行加载
                2：补全.js扩展名进行加载
                3：补全.json扩展名进行加载
                4：补全.node扩展名进行加载
                5：加载失败，终端报错

        第三方模块的加载机制
            如果传递给require()的模块标识符不是一个内置模块，也没有以'./' 或 '../'开头，则Node.js会从当前模块的
            父目录开始，尝试以/node_modules文件夹中加载第三方模块。

            如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，查到文件系统的根目录.                                

            例如:假设在 'C:\Users\itheima\project\foo.js' 文件丽调用了require('tools'),则Node.js会按以下顺序查找:
                1: 'C:\Users\itheima\project\node_modules\tools'
                2: 'C:\Users\itheima\node_modules\tools'
                3: 'C:\Users\node_modules\tools'
                4: 'C:\node_modules\tools'

            目录作为模块
                当把目录作为模块标识符,传递给require()进行加载的时候,有三种加载方式:
                    1:在被加载的目录下查找一个叫做package.json文件,并寻找main属性,作为require()加载的入口
                    2:如果目录里没有package.json文件,或者main入口不存在或无法解析,则Node.js将会试图加载目录下的index.json文件
                    3:如果以上两步都失败了,则Node.js会在终端打印错误消息,报告模块的缺失:Error:Content find module 'xxx'

Express简介
    什么是Express
        官方给出的概念：Express是基于Node.js平台，快速，开放，极简的Web开发框架
        同事得理解：Express的作用和Node.js内置的http模块类似，是专门用来创建Web服务器的
        Express的本质：就是npm上的第三方包，提供了快速创建web服务器的便捷方法

    Express能做什么
        对于前端程序员来说，最常见的两种服务器，分别是：
            Web网站服务器：专门对外提供Web网页资源的服务器。
            API接口服务器：专门对外提供API接口的服务器。
            使用Express，我们可以方便，快速的创建Web网站的服务器或API接口的服务器
    
    托管静态资源
        express.static()
            express提供了一个非常好用的函数，叫做express.static(),通过它，我们可以非常方便地创建一个静态资源服务器，
            例如，通过如下代码就可以将public目录下的图片，CSS文件，JavaScript文件对外开放访问了。
            app.use(express.static('public'))

nodemon
    为什么要使用nodemon 
        在编写调试Node.js项目的时候，如果修改了项目的代码，则需要频繁的手动close掉，然后再重新启动，非常繁琐
        现在，我们可以使用nodemon这个工具，它能够监听项目文件的变动，当代码被修改后，nodemon会自动帮我们重启项目，极大方便了开发和调试

    安装nodemon
        在终端中，运行如下命令，即可将nodemon安装为全局可用的工具：
            npm install -g nodemon   

        使用nodemon
            nodemon app.js


Express中的路由
    在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系
    Express中的路由分3三部分组成，分别是请求的类型，请求的URL地址，处理函数，格式如下：
        app.WETHOD(PATH,HANDLER)

    Express中路由的例子
        //匹配GET请求，且请求URL为/
        app.get('/',function(req,res){
            res.send('Hello world!');
        })

        // 匹配 POST 请求，且请求 URL 为 /
        app.post('/',function(res,req){
            res.send('Got a POST request');
        })
    
    路由的匹配过程
        每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。
        在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的URL同时匹配成功，则Express会将这次请求，
        转交给对应的function函数进行处理

    模块化路由
        为了方便对路由进行模块化的管理，Express不建议将路由直接挂载到app上，而是推荐将路由抽离为单独的模块。
        将路由抽离为单独模块的步骤如下：
            1：创建路由模块对应的.js文件
            2：调用express.Router()函数创建路由对象
            3：向路由对象上挂载具体的路由
            4：使用module.exports向外共享路由对象
            5：使用app.use()函数注册路由模块

    什么是中间件
        中间件，特指业务流程的中间处理环节
    Express中间件的调用流程
        当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理

    Express中间件的格式
        Express的中间件，本质上就是一个function处理函数，Express中间件格式如下：
            app.get('/',function(req,res,next){
                next();
            })

        注意：中间件函数的形参列表中，必须包含next参数，而路由处理函数中只包含req和res。

        next函数的作用：
            next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由

        全局生效的中间件
            客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件。
            通过调用app.use(中间件函数)，即可定义一个全局生效的中间件
        
        中间件的作用
            多个中间件之间，共享同一份req和res。基于这样的特性，我们可以在上游的中间件中，统一为req对象添加
            自定义的属性和方法，供下游的中间件或路由进行使用。
        
        定义多个全局中间件
            可以使用app.use()连续定义多个全局中间件。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用

         局部生效的中间件
            不使用app.use()定义的中间件，叫做局部生效的中间件

        定义多个局部中间件 ,可根据自己的喜好，选择任意一种方式进行使用
            app.get('/',m1,m2,(req,res)=>{res.send('get....ok')})
            app.get('/',[m1,m2],(req,res)=>{res.send('get....ok')})

        中间件使用的5个注意事项：
            1：一定要在路由之前注册中间件
            2：客户端发送过来的请求，可以连续调用多个中间件进行处理
            3：执行玩中间件业务代码之后，不要忘记调用next()函数
            4：为了防止代码逻辑混乱，调用next()函数后不要再写额外的代码
            5：连续调用多个中间件时，多个中间件之间，共享req和res对象

        中间件的分类
            为了方便大家的理解和记忆中间件的使用，Express官方把常见的中间件用法，分成了5大类，分别是：
                1：应用级别的中间件
                    通过app.use()或app.get()或app.post()，绑定到app实例上的中间件，叫做应用级别的中间件
                2：路由级别的中间件
                    绑定到express.Router()实例上的中间件，叫做路由级别的中间件。它的用法和应用级别中间件没有任何区别。
                    只不过，应用级别中间件是绑定到app实例上，路由级别中间件绑定到router实例上
                3：错误级别的中间件
                    错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题
                    格式：错误级别中间件的function处理函数中，必须有四个形参，形参顺序从前往后，分别是(err,req,res,next)
                    注意：错误级别中间件，必须注册在所有路由之后！
                4：Express内置的中间件
                    自Express4.16.0版本开始，Express内置了3个常用的中间件，极大的提高了Express项目的开发效率和体验
                        1：express.static 快速托管静态资源的内置中间件，例如：HTML文件，图片，CSS样式等(无兼容性)
                        2：express.json解析JSON格式的请求体数据(有兼容性，仅在4.16.0+版本可用)
                            格式：app.use(express.json())
                        3：express.urlencoded解析 URL-encoded格式的请求体数据(有兼容性，仅在4.16.0+版本可用)
                            格式：app.use(express.urlencoded({extended:false}))
                5：第三方的中间件
                    非Express官方内置的，而是由第三方开发出来的中间件，叫做第三方中间件。在项目中，大家可以按需下载
                    并配置第三方中间件，从而提高项目的开发效率

                    例如：在express@4.16.0之前的版本中，经常使用body-parser这个第三方中间件，来解析请求体数据。使用步骤如下：
                        1：运行 npm install body-parser安装中间件
                        2：使用require导入中间件
                        3：调用app.use()注册并使用中间件
                    
                    注意：Express内置的express.urlencoded中间件，就是基于body-parser这个第三方中间件进一步封装出来的。

            自定义中间件
                自己手动模拟一个类似于express.urlencoded这样的中间件，来解析POST提交到服务器的表单数据
                    实现步骤：
                        1：定义中间件
                        2：监听req的data事件
                        3：监听req的end事件
                        4：使用querystring模块解析请求体数据
                        5：将解析出来的数据对象挂载为req.body
                        6：将自定义中间件封装为模块

        接口的跨域问题
            解决接口跨域问题的方案主要有两种:
                1:CORS(主流的解决方案,推荐使用)          
                2:JSONP(有缺陷的解决方案:只支持GET请求)

            使用conrs中间件解决跨域问题
                cors是Express的一个第三方中间件,通过安装和配置cors中间件,跨域很方便地解决跨域问题

            使用步骤分为如下3步:
                1: 运行 npm install cors 安装中间件
                2: 使用 const cors = require('cors');
                3: 在路由之前调用 app.use(cors())配置中间件

            CORS请求的分类
                客户端在请求CORS接口时,根据请求方式和请求头不同,跨域将CORS的请求分为两大类,分别是:
                    1:简单请求
                        同时满足以下两大条件请求,就属于简单请求:
                            1:get,post,head三者之一
                            2:HTTP头部信息不超过以下几种字段:无自定义头部字段,Accept,Accept-Language,DPR,
                            Downlink,Save-Data,Viewport-Width,Width,Content-Type(只有三个值application/x-www-form
                            -urlencoded,multipart/form-data,text/plain)
                    2:预检请求
                        只要符号以下任何一个条件的请求,都需要进行预检请求:
                            1:请求方式为get,post,head之外的请求Method类型
                            2:请求头中包含自定义头部字段
                            3:向服务器发送了application/json格式的数据

                    简单请求和预检请求的区别
                        简单请求的特点:客户端与服务器之间只会发送一次请求
                        预检请求的特点:客户端与服务器之间会发生两次请求,OPTION预检请求成功之后,才会发起真正的请求.

    Web开发模式
        目前主流的Web开发模式有两种，分别时：
            1：基于服务端渲染的传统Web开发模式
                概念：
                    服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的。因此，客户端
                    不需要Ajax这样的技术额外请求页面的数据。
                优点：
                    1：前端耗时烧，因为服务器负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电
                    2：有利于SEO。因为服务器响应的是完整的HTML页面内容，所有爬虫更容易爬取获得信息，更有利于SEO
                缺点：
                    1：占用服务器端资源。即服务器完成HTML页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。
                    2：不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于
                    项目高效开发。

            2：基于前后端分离的新型Web开发模式
                概念：前后的端分离的开发模式，依赖于Ajax技术的广泛应用。简而言之，前后端分离的Web开发模式，
                    就是后端只负责提供API接口，前端使用Ajax调用接口的开发模式。
                优点：
                    1：开发体验好，前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性。
                    2：用户体验好。Ajax技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新
                    3：减轻了服务器的渲染压力。因为页面最终是在每个哦那个胡的浏览器中生成的。

                缺点：
                    1：不利用SEO，因为完整的HTML页面需要在客户端动态拼接完成，所有爬虫对无法爬取页面的有效信息。
                    解决方案：利用Vue，React等前端框架SSR(server side render)技术能够很好的解决SEO问题
                
        如何选择Web开发模式
            比如企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的SEO，则这时我们就需要使用服务器端渲染。
            而类似后台管理项目，交互性比较强，不需要考虑SEO，那么就可以使用前后端分离的开发模式。

            另外，具体使用何种开发模式并不是绝对的，为了同时兼顾了首页的渲染速度和前后的分离的开发效率，一些网站
            采用了首屏服务器端渲染+其他页面前后的分离的开发模式
    
    身份认证
        什么是身份认证？
            身份认证又称身份验证，鉴权，是指通过一定的手段，完成对用户身份的确认

        为什么需要身份认证？
            身份认证的目的，是为了确认当前所声称为某种身份的用户，确实是所身称的用户

        不同开发模式下的身份认证
            对于服务端渲染和前后端分离这两种开发模式来说，分别有着不同的身份认证方案：
                1：服务端渲染推荐使用Session认证机制
                2：前后端分离推荐使用JWT认证机制

    在Express中使用Session认证
        在Express-session项目中，只需要安装express-session中间件，即可在项目中使用Session认证；
            npm install express-session

    了解Session认证的局限性
        Session认证机制需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，所有，当涉及到前端跨域请求
        后端接口的时候，需要做很多额外的配置，才能实现跨域Session认证

    注意：
        1：当前端请求后端接口不存在跨域问题的时候，推荐使用Session身份认证机制
        2：当前端需要跨域请求后端接口的时候，不推荐使用Session身份认证机制，推荐使用JWT认证机制。
    
    什么是JWT
        JWT是目前最流行的跨域认证解决方案

    JWT的组成部分
        JWT通常由三部分组成，分别是Header(头部),Payload(有效荷载),Signature(签名)
        三者之间使用英文的"."分隔，格式如下：
            Header.Payload.Signature

        JWT的三个部分各自代表的含有
            JWT的三个组成部分，从前到后分别是Header，Payload，Signature。

        JWT的三个部分各自代表的含义
            Payload部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串
            Header和Signature是安全性相关的部分，只是为了保证Token的安全性

        JWT的使用凡是
            客户端收到服务器返回的JWT之后，通常会将它储存在localStorage或sessionStorage中。
            此后，客户端每次与服务器通信，都要带上这个JWT的字符串，从而进行身份认证，推荐的做法是把JWT
            放在HTTP的Authorization字段中，格式如下：
                Authorization：Bearer <token>

        安装JWT相关的包
            运行如下命令，安装如下两个JWT相关的包：
                npm install jsonwebtoken express-jwt

            其中：
                jsonwebtoken用于生成JWT字符串
                express-jwt 用于将JWT字符串解析还原成JSON对象

            定义密钥
                为了保证JWT字符串的安全性，防止JWT字符串在网络传输过程中被别人破解，我们需要专门定义一个
                用于加密和解密的secret密钥
                    1：当生成JWT字符串的时候，需要使用secret密钥对用户信息进行加密，最终得到加密好的JWT字符串
                    2：当把JWT字符串继续还原成JSON对象的时候，需要使用secret密钥进行解密